package com.example.drainagemonitoring.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.me.pipelinedetectionapp.bean.DetectionDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DETECTION_DB".
*/
public class DetectionDbDao extends AbstractDao<DetectionDb, Long> {

    public static final String TABLENAME = "DETECTION_DB";

    /**
     * Properties of entity DetectionDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectName = new Property(1, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property ImageName = new Property(2, String.class, "imageName", false, "IMAGE_NAME");
        public final static Property RoadName = new Property(3, String.class, "roadName", false, "ROAD_NAME");
        public final static Property LineDot = new Property(4, String.class, "lineDot", false, "LINE_DOT");
        public final static Property ConnectionPoint = new Property(5, String.class, "connectionPoint", false, "CONNECTION_POINT");
        public final static Property StartingPointOrigin = new Property(6, String.class, "startingPointOrigin", false, "STARTING_POINT_ORIGIN");
        public final static Property StartingPointEnd = new Property(7, String.class, "startingPointEnd", false, "STARTING_POINT_END");
        public final static Property FolwDirection = new Property(8, String.class, "folwDirection", false, "FOLW_DIRECTION");
        public final static Property Pipe = new Property(9, String.class, "pipe", false, "PIPE");
        public final static Property PipeDiameter = new Property(10, String.class, "pipeDiameter", false, "PIPE_DIAMETER");
        public final static Property Type = new Property(11, String.class, "type", false, "TYPE");
        public final static Property InspectDate = new Property(12, java.util.Date.class, "inspectDate", false, "INSPECT_DATE");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
    }


    public DetectionDbDao(DaoConfig config) {
        super(config);
    }
    
    public DetectionDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DETECTION_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROJECT_NAME\" TEXT," + // 1: projectName
                "\"IMAGE_NAME\" TEXT," + // 2: imageName
                "\"ROAD_NAME\" TEXT," + // 3: roadName
                "\"LINE_DOT\" TEXT," + // 4: lineDot
                "\"CONNECTION_POINT\" TEXT," + // 5: connectionPoint
                "\"STARTING_POINT_ORIGIN\" TEXT," + // 6: startingPointOrigin
                "\"STARTING_POINT_END\" TEXT," + // 7: startingPointEnd
                "\"FOLW_DIRECTION\" TEXT," + // 8: folwDirection
                "\"PIPE\" TEXT," + // 9: pipe
                "\"PIPE_DIAMETER\" TEXT," + // 10: pipeDiameter
                "\"TYPE\" TEXT," + // 11: type
                "\"INSPECT_DATE\" INTEGER," + // 12: inspectDate
                "\"REMARK\" TEXT);"); // 13: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DETECTION_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DetectionDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String imageName = entity.getImageName();
        if (imageName != null) {
            stmt.bindString(3, imageName);
        }
 
        String roadName = entity.getRoadName();
        if (roadName != null) {
            stmt.bindString(4, roadName);
        }
 
        String lineDot = entity.getLineDot();
        if (lineDot != null) {
            stmt.bindString(5, lineDot);
        }
 
        String connectionPoint = entity.getConnectionPoint();
        if (connectionPoint != null) {
            stmt.bindString(6, connectionPoint);
        }
 
        String startingPointOrigin = entity.getStartingPointOrigin();
        if (startingPointOrigin != null) {
            stmt.bindString(7, startingPointOrigin);
        }
 
        String startingPointEnd = entity.getStartingPointEnd();
        if (startingPointEnd != null) {
            stmt.bindString(8, startingPointEnd);
        }
 
        String folwDirection = entity.getFolwDirection();
        if (folwDirection != null) {
            stmt.bindString(9, folwDirection);
        }
 
        String pipe = entity.getPipe();
        if (pipe != null) {
            stmt.bindString(10, pipe);
        }
 
        String pipeDiameter = entity.getPipeDiameter();
        if (pipeDiameter != null) {
            stmt.bindString(11, pipeDiameter);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        java.util.Date inspectDate = entity.getInspectDate();
        if (inspectDate != null) {
            stmt.bindLong(13, inspectDate.getTime());
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DetectionDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String imageName = entity.getImageName();
        if (imageName != null) {
            stmt.bindString(3, imageName);
        }
 
        String roadName = entity.getRoadName();
        if (roadName != null) {
            stmt.bindString(4, roadName);
        }
 
        String lineDot = entity.getLineDot();
        if (lineDot != null) {
            stmt.bindString(5, lineDot);
        }
 
        String connectionPoint = entity.getConnectionPoint();
        if (connectionPoint != null) {
            stmt.bindString(6, connectionPoint);
        }
 
        String startingPointOrigin = entity.getStartingPointOrigin();
        if (startingPointOrigin != null) {
            stmt.bindString(7, startingPointOrigin);
        }
 
        String startingPointEnd = entity.getStartingPointEnd();
        if (startingPointEnd != null) {
            stmt.bindString(8, startingPointEnd);
        }
 
        String folwDirection = entity.getFolwDirection();
        if (folwDirection != null) {
            stmt.bindString(9, folwDirection);
        }
 
        String pipe = entity.getPipe();
        if (pipe != null) {
            stmt.bindString(10, pipe);
        }
 
        String pipeDiameter = entity.getPipeDiameter();
        if (pipeDiameter != null) {
            stmt.bindString(11, pipeDiameter);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        java.util.Date inspectDate = entity.getInspectDate();
        if (inspectDate != null) {
            stmt.bindLong(13, inspectDate.getTime());
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DetectionDb readEntity(Cursor cursor, int offset) {
        DetectionDb entity = new DetectionDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // projectName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // roadName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lineDot
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // connectionPoint
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // startingPointOrigin
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // startingPointEnd
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // folwDirection
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pipe
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pipeDiameter
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // type
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // inspectDate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DetectionDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoadName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLineDot(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setConnectionPoint(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStartingPointOrigin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStartingPointEnd(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFolwDirection(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPipe(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPipeDiameter(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setInspectDate(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DetectionDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DetectionDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DetectionDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
