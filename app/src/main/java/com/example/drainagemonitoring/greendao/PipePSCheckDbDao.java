package com.example.drainagemonitoring.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.me.pipelinedetectionapp.bean.PipePSCheckDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PIPE_PSCHECK_DB".
*/
public class PipePSCheckDbDao extends AbstractDao<PipePSCheckDb, Long> {

    public static final String TABLENAME = "PIPE_PSCHECK_DB";

    /**
     * Properties of entity PipePSCheckDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectName = new Property(1, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property ImageName = new Property(2, String.class, "imageName", false, "IMAGE_NAME");
        public final static Property RoadName = new Property(3, String.class, "roadName", false, "ROAD_NAME");
        public final static Property LineDot = new Property(4, String.class, "lineDot", false, "LINE_DOT");
        public final static Property ConnectionPoint = new Property(5, String.class, "connectionPoint", false, "CONNECTION_POINT");
        public final static Property CheckLength = new Property(6, String.class, "checkLength", false, "CHECK_LENGTH");
        public final static Property Flow = new Property(7, String.class, "flow", false, "FLOW");
        public final static Property Fullness = new Property(8, String.class, "fullness", false, "FULLNESS");
        public final static Property PipeMaterials = new Property(9, String.class, "pipeMaterials", false, "PIPE_MATERIALS");
        public final static Property PipeSize = new Property(10, String.class, "pipeSize", false, "PIPE_SIZE");
        public final static Property DefectLength = new Property(11, String.class, "defectLength", false, "DEFECT_LENGTH");
        public final static Property DefectCode = new Property(12, String.class, "defectCode", false, "DEFECT_CODE");
        public final static Property DefectGrade = new Property(13, String.class, "defectGrade", false, "DEFECT_GRADE");
        public final static Property Hybrid = new Property(14, String.class, "hybrid", false, "HYBRID");
        public final static Property WellQuestion = new Property(15, String.class, "wellQuestion", false, "WELL_QUESTION");
        public final static Property WaterQuestion = new Property(16, String.class, "waterQuestion", false, "WATER_QUESTION");
        public final static Property AboutQuestion = new Property(17, String.class, "aboutQuestion", false, "ABOUT_QUESTION");
        public final static Property Picture = new Property(18, String.class, "picture", false, "PICTURE");
        public final static Property Local = new Property(19, String.class, "local", false, "LOCAL");
        public final static Property Remark = new Property(20, String.class, "remark", false, "REMARK");
        public final static Property InspectDate = new Property(21, java.util.Date.class, "inspectDate", false, "INSPECT_DATE");
        public final static Property PipeType = new Property(22, String.class, "pipeType", false, "PIPE_TYPE");
    }


    public PipePSCheckDbDao(DaoConfig config) {
        super(config);
    }
    
    public PipePSCheckDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PIPE_PSCHECK_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROJECT_NAME\" TEXT," + // 1: projectName
                "\"IMAGE_NAME\" TEXT," + // 2: imageName
                "\"ROAD_NAME\" TEXT," + // 3: roadName
                "\"LINE_DOT\" TEXT," + // 4: lineDot
                "\"CONNECTION_POINT\" TEXT," + // 5: connectionPoint
                "\"CHECK_LENGTH\" TEXT," + // 6: checkLength
                "\"FLOW\" TEXT," + // 7: flow
                "\"FULLNESS\" TEXT," + // 8: fullness
                "\"PIPE_MATERIALS\" TEXT," + // 9: pipeMaterials
                "\"PIPE_SIZE\" TEXT," + // 10: pipeSize
                "\"DEFECT_LENGTH\" TEXT," + // 11: defectLength
                "\"DEFECT_CODE\" TEXT," + // 12: defectCode
                "\"DEFECT_GRADE\" TEXT," + // 13: defectGrade
                "\"HYBRID\" TEXT," + // 14: hybrid
                "\"WELL_QUESTION\" TEXT," + // 15: wellQuestion
                "\"WATER_QUESTION\" TEXT," + // 16: waterQuestion
                "\"ABOUT_QUESTION\" TEXT," + // 17: aboutQuestion
                "\"PICTURE\" TEXT," + // 18: picture
                "\"LOCAL\" TEXT," + // 19: local
                "\"REMARK\" TEXT," + // 20: remark
                "\"INSPECT_DATE\" INTEGER," + // 21: inspectDate
                "\"PIPE_TYPE\" TEXT);"); // 22: pipeType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PIPE_PSCHECK_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PipePSCheckDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String imageName = entity.getImageName();
        if (imageName != null) {
            stmt.bindString(3, imageName);
        }
 
        String roadName = entity.getRoadName();
        if (roadName != null) {
            stmt.bindString(4, roadName);
        }
 
        String lineDot = entity.getLineDot();
        if (lineDot != null) {
            stmt.bindString(5, lineDot);
        }
 
        String connectionPoint = entity.getConnectionPoint();
        if (connectionPoint != null) {
            stmt.bindString(6, connectionPoint);
        }
 
        String checkLength = entity.getCheckLength();
        if (checkLength != null) {
            stmt.bindString(7, checkLength);
        }
 
        String flow = entity.getFlow();
        if (flow != null) {
            stmt.bindString(8, flow);
        }
 
        String fullness = entity.getFullness();
        if (fullness != null) {
            stmt.bindString(9, fullness);
        }
 
        String pipeMaterials = entity.getPipeMaterials();
        if (pipeMaterials != null) {
            stmt.bindString(10, pipeMaterials);
        }
 
        String pipeSize = entity.getPipeSize();
        if (pipeSize != null) {
            stmt.bindString(11, pipeSize);
        }
 
        String defectLength = entity.getDefectLength();
        if (defectLength != null) {
            stmt.bindString(12, defectLength);
        }
 
        String defectCode = entity.getDefectCode();
        if (defectCode != null) {
            stmt.bindString(13, defectCode);
        }
 
        String defectGrade = entity.getDefectGrade();
        if (defectGrade != null) {
            stmt.bindString(14, defectGrade);
        }
 
        String hybrid = entity.getHybrid();
        if (hybrid != null) {
            stmt.bindString(15, hybrid);
        }
 
        String wellQuestion = entity.getWellQuestion();
        if (wellQuestion != null) {
            stmt.bindString(16, wellQuestion);
        }
 
        String waterQuestion = entity.getWaterQuestion();
        if (waterQuestion != null) {
            stmt.bindString(17, waterQuestion);
        }
 
        String aboutQuestion = entity.getAboutQuestion();
        if (aboutQuestion != null) {
            stmt.bindString(18, aboutQuestion);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(19, picture);
        }
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(20, local);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(21, remark);
        }
 
        java.util.Date inspectDate = entity.getInspectDate();
        if (inspectDate != null) {
            stmt.bindLong(22, inspectDate.getTime());
        }
 
        String pipeType = entity.getPipeType();
        if (pipeType != null) {
            stmt.bindString(23, pipeType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PipePSCheckDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String imageName = entity.getImageName();
        if (imageName != null) {
            stmt.bindString(3, imageName);
        }
 
        String roadName = entity.getRoadName();
        if (roadName != null) {
            stmt.bindString(4, roadName);
        }
 
        String lineDot = entity.getLineDot();
        if (lineDot != null) {
            stmt.bindString(5, lineDot);
        }
 
        String connectionPoint = entity.getConnectionPoint();
        if (connectionPoint != null) {
            stmt.bindString(6, connectionPoint);
        }
 
        String checkLength = entity.getCheckLength();
        if (checkLength != null) {
            stmt.bindString(7, checkLength);
        }
 
        String flow = entity.getFlow();
        if (flow != null) {
            stmt.bindString(8, flow);
        }
 
        String fullness = entity.getFullness();
        if (fullness != null) {
            stmt.bindString(9, fullness);
        }
 
        String pipeMaterials = entity.getPipeMaterials();
        if (pipeMaterials != null) {
            stmt.bindString(10, pipeMaterials);
        }
 
        String pipeSize = entity.getPipeSize();
        if (pipeSize != null) {
            stmt.bindString(11, pipeSize);
        }
 
        String defectLength = entity.getDefectLength();
        if (defectLength != null) {
            stmt.bindString(12, defectLength);
        }
 
        String defectCode = entity.getDefectCode();
        if (defectCode != null) {
            stmt.bindString(13, defectCode);
        }
 
        String defectGrade = entity.getDefectGrade();
        if (defectGrade != null) {
            stmt.bindString(14, defectGrade);
        }
 
        String hybrid = entity.getHybrid();
        if (hybrid != null) {
            stmt.bindString(15, hybrid);
        }
 
        String wellQuestion = entity.getWellQuestion();
        if (wellQuestion != null) {
            stmt.bindString(16, wellQuestion);
        }
 
        String waterQuestion = entity.getWaterQuestion();
        if (waterQuestion != null) {
            stmt.bindString(17, waterQuestion);
        }
 
        String aboutQuestion = entity.getAboutQuestion();
        if (aboutQuestion != null) {
            stmt.bindString(18, aboutQuestion);
        }
 
        String picture = entity.getPicture();
        if (picture != null) {
            stmt.bindString(19, picture);
        }
 
        String local = entity.getLocal();
        if (local != null) {
            stmt.bindString(20, local);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(21, remark);
        }
 
        java.util.Date inspectDate = entity.getInspectDate();
        if (inspectDate != null) {
            stmt.bindLong(22, inspectDate.getTime());
        }
 
        String pipeType = entity.getPipeType();
        if (pipeType != null) {
            stmt.bindString(23, pipeType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PipePSCheckDb readEntity(Cursor cursor, int offset) {
        PipePSCheckDb entity = new PipePSCheckDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // projectName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // roadName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lineDot
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // connectionPoint
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // checkLength
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // flow
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fullness
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // pipeMaterials
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pipeSize
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // defectLength
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // defectCode
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // defectGrade
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // hybrid
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // wellQuestion
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // waterQuestion
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // aboutQuestion
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // picture
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // local
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // remark
            cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)), // inspectDate
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // pipeType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PipePSCheckDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoadName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLineDot(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setConnectionPoint(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCheckLength(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFlow(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFullness(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPipeMaterials(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPipeSize(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDefectLength(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDefectCode(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDefectGrade(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHybrid(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setWellQuestion(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setWaterQuestion(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAboutQuestion(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPicture(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLocal(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRemark(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setInspectDate(cursor.isNull(offset + 21) ? null : new java.util.Date(cursor.getLong(offset + 21)));
        entity.setPipeType(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PipePSCheckDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PipePSCheckDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PipePSCheckDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
