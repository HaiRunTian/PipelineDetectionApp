package com.example.drainagemonitoring.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.me.pipelinedetectionapp.bean.ProjectDb;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT_DB".
*/
public class ProjectDbDao extends AbstractDao<ProjectDb, Long> {

    public static final String TABLENAME = "PROJECT_DB";

    /**
     * Properties of entity ProjectDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectName = new Property(1, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property ProjectNumber = new Property(2, String.class, "projectNumber", false, "PROJECT_NUMBER");
        public final static Property InspectorName = new Property(3, String.class, "inspectorName", false, "INSPECTOR_NAME");
        public final static Property RegistrarName = new Property(4, String.class, "registrarName", false, "REGISTRAR_NAME");
        public final static Property AreaName = new Property(5, String.class, "areaName", false, "AREA_NAME");
        public final static Property TestMethod = new Property(6, String.class, "testMethod", false, "TEST_METHOD");
        public final static Property InspectDate = new Property(7, String.class, "inspectDate", false, "INSPECT_DATE");
        public final static Property ProjectMode = new Property(8, String.class, "projectMode", false, "PROJECT_MODE");
    }


    public ProjectDbDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PROJECT_NAME\" TEXT," + // 1: projectName
                "\"PROJECT_NUMBER\" TEXT," + // 2: projectNumber
                "\"INSPECTOR_NAME\" TEXT," + // 3: inspectorName
                "\"REGISTRAR_NAME\" TEXT," + // 4: registrarName
                "\"AREA_NAME\" TEXT," + // 5: areaName
                "\"TEST_METHOD\" TEXT," + // 6: testMethod
                "\"INSPECT_DATE\" TEXT," + // 7: inspectDate
                "\"PROJECT_MODE\" TEXT);"); // 8: projectMode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProjectDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String projectNumber = entity.getProjectNumber();
        if (projectNumber != null) {
            stmt.bindString(3, projectNumber);
        }
 
        String inspectorName = entity.getInspectorName();
        if (inspectorName != null) {
            stmt.bindString(4, inspectorName);
        }
 
        String registrarName = entity.getRegistrarName();
        if (registrarName != null) {
            stmt.bindString(5, registrarName);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(6, areaName);
        }
 
        String testMethod = entity.getTestMethod();
        if (testMethod != null) {
            stmt.bindString(7, testMethod);
        }
 
        String inspectDate = entity.getInspectDate();
        if (inspectDate != null) {
            stmt.bindString(8, inspectDate);
        }
 
        String projectMode = entity.getProjectMode();
        if (projectMode != null) {
            stmt.bindString(9, projectMode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProjectDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(2, projectName);
        }
 
        String projectNumber = entity.getProjectNumber();
        if (projectNumber != null) {
            stmt.bindString(3, projectNumber);
        }
 
        String inspectorName = entity.getInspectorName();
        if (inspectorName != null) {
            stmt.bindString(4, inspectorName);
        }
 
        String registrarName = entity.getRegistrarName();
        if (registrarName != null) {
            stmt.bindString(5, registrarName);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(6, areaName);
        }
 
        String testMethod = entity.getTestMethod();
        if (testMethod != null) {
            stmt.bindString(7, testMethod);
        }
 
        String inspectDate = entity.getInspectDate();
        if (inspectDate != null) {
            stmt.bindString(8, inspectDate);
        }
 
        String projectMode = entity.getProjectMode();
        if (projectMode != null) {
            stmt.bindString(9, projectMode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProjectDb readEntity(Cursor cursor, int offset) {
        ProjectDb entity = new ProjectDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // projectName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // projectNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // inspectorName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // registrarName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // areaName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // testMethod
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // inspectDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // projectMode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProjectDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProjectNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInspectorName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRegistrarName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAreaName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTestMethod(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInspectDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProjectMode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProjectDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProjectDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProjectDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
